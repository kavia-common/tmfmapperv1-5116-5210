{"is_source_file": true, "format": "Python", "description": "This file defines a ValidationService class responsible for runtime validation of payloads against OpenAPI schemas within a Flask-based API middleware. It includes methods for schema retrieval, adjustments based on validation direction, and performing validation with detailed error reporting.", "external_files": ["jsonschema"], "external_methods": ["jsonschema.Draft7Validator", "jsonschema.RefResolver", "jsonschema.exceptions"], "published": ["ValidationService"], "classes": [{"name": "ValidationService", "description": "Provides runtime validation of payloads against OpenAPI schemas, supporting direction-aware schema adjustments and detailed validation error reporting."}], "methods": [{"name": "__init__(self, schema_loader)", "description": "Initializes the ValidationService with a schema loader object.", "scope": "ValidationService", "scopeKind": "class"}, {"name": "Dict[str,Any] _find_schema_for_resource(self, resource: str)", "description": "Attempts to locate an appropriate schema within the loaded OpenAPI components for a given resource name, with fallback to a generic object schema.", "scope": "ValidationService", "scopeKind": "class"}, {"name": "Dict[str,Any] _directional_adjustments(self, direction: str, schema: Dict[str, Any])", "description": "Applies schema modifications based on validation direction, currently a placeholder returning the schema unchanged.", "scope": "ValidationService", "scopeKind": "class"}, {"name": "Tuple[bool,list] validate(self, resource: str, payload: Any, direction: str = \"tmf_to_native\")", "description": "Validates a given payload against the derived schema for a resource, considering the validation direction, and returns validation success status and error details.", "scope": "ValidationService", "scopeKind": "class"}], "calls": ["jsonschema.RefResolver.from_schema", "jsonschema.Draft7Validator", "validator.iter_errors"], "search-terms": ["ValidationService", "runtime payload validation", "schema retrieval", "OpenAPI schema", "direction-aware validation", "schema fallback"], "state": 2, "file_id": 14, "knowledge_revision": 55, "git_revision": "6c663459b5cbf5c43f72c736ffc19d714f7eb24b", "revision_history": [{"31": ""}, {"55": "6c663459b5cbf5c43f72c736ffc19d714f7eb24b"}], "ctags": [{"_type": "tag", "name": "ValidationService", "path": "/home/kavia/workspace/code-generation/tmfmapperv1-5116-5210/FlaskTMFTranslationMiddleware/app/services/validator.py", "pattern": "/^class ValidationService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/tmfmapperv1-5116-5210/FlaskTMFTranslationMiddleware/app/services/validator.py", "pattern": "/^    def __init__(self, schema_loader):$/", "language": "Python", "kind": "member", "signature": "(self, schema_loader)", "scope": "ValidationService", "scopeKind": "class"}, {"_type": "tag", "name": "_directional_adjustments", "path": "/home/kavia/workspace/code-generation/tmfmapperv1-5116-5210/FlaskTMFTranslationMiddleware/app/services/validator.py", "pattern": "/^    def _directional_adjustments(self, direction: str, schema: Dict[str, Any]) -> Dict[str, Any]/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, direction: str, schema: Dict[str, Any])", "scope": "ValidationService", "scopeKind": "class"}, {"_type": "tag", "name": "_find_schema_for_resource", "path": "/home/kavia/workspace/code-generation/tmfmapperv1-5116-5210/FlaskTMFTranslationMiddleware/app/services/validator.py", "pattern": "/^    def _find_schema_for_resource(self, resource: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, resource: str)", "scope": "ValidationService", "scopeKind": "class"}, {"_type": "tag", "name": "jsonschema_exceptions", "path": "/home/kavia/workspace/code-generation/tmfmapperv1-5116-5210/FlaskTMFTranslationMiddleware/app/services/validator.py", "pattern": "/^from jsonschema import Draft7Validator, RefResolver, exceptions as jsonschema_exceptions$/", "language": "Python", "kind": "unknown", "nameref": "unknown:exceptions"}, {"_type": "tag", "name": "validate", "path": "/home/kavia/workspace/code-generation/tmfmapperv1-5116-5210/FlaskTMFTranslationMiddleware/app/services/validator.py", "pattern": "/^    def validate(self, resource: str, payload: Any, direction: str = \"tmf_to_native\") -> Tuple[b/", "language": "Python", "typeref": "typename:Tuple[bool,list]", "kind": "member", "signature": "(self, resource: str, payload: Any, direction: str = \"tmf_to_native\")", "scope": "ValidationService", "scopeKind": "class"}], "hash": "fc76da103d4a55dc96937a638efeefb5", "format-version": 4, "code-base-name": "FlaskTMFTranslationMiddleware", "filename": "FlaskTMFTranslationMiddleware/app/services/validator.py"}